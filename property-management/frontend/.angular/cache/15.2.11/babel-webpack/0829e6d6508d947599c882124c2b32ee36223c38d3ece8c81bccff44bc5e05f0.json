{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/api.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \" User ID is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \" Password is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let RegisterComponent = /*#__PURE__*/(() => {\n  class RegisterComponent {\n    constructor(fb, apiService, router) {\n      this.fb = fb;\n      this.apiService = apiService;\n      this.router = router;\n      this.isLoading = false;\n      this.registerForm = this.fb.group({\n        userId: ['', Validators.required],\n        password: ['', Validators.required]\n      });\n    }\n    onSubmit() {\n      if (this.registerForm.valid) {\n        this.isLoading = true;\n        this.apiService.register(this.registerForm.value.userId, this.registerForm.value.password).subscribe({\n          next: () => {\n            this.isLoading = false;\n            this.router.navigate(['/login']);\n          },\n          error: error => {\n            console.error('Error:', error);\n            this.isLoading = false;\n          }\n        });\n      }\n    }\n    static {\n      this.ɵfac = function RegisterComponent_Factory(t) {\n        return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService), i0.ɵɵdirectiveInject(i3.Router));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: RegisterComponent,\n        selectors: [[\"app-register\"]],\n        decls: 19,\n        vars: 5,\n        consts: [[1, \"container\", \"mt-4\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [1, \"form-label\"], [\"type\", \"text\", \"formControlName\", \"userId\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"text-danger\"]],\n        template: function RegisterComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h5\", 3);\n            i0.ɵɵtext(4, \"Register\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(5, \"div\", 4)(6, \"form\", 5);\n            i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_6_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(7, \"div\", 6)(8, \"label\", 7);\n            i0.ɵɵtext(9, \"User ID\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(10, \"input\", 8);\n            i0.ɵɵtemplate(11, RegisterComponent_div_11_Template, 2, 0, \"div\", 9);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(12, \"div\", 6)(13, \"label\", 7);\n            i0.ɵɵtext(14, \"Password\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(15, \"input\", 10);\n            i0.ɵɵtemplate(16, RegisterComponent_div_16_Template, 2, 0, \"div\", 9);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(17, \"button\", 11);\n            i0.ɵɵtext(18);\n            i0.ɵɵelementEnd()()()()();\n          }\n          if (rf & 2) {\n            let tmp_1_0;\n            let tmp_2_0;\n            i0.ɵɵadvance(6);\n            i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.registerForm.get(\"userId\")) == null ? null : tmp_1_0.touched) && ((tmp_1_0 = ctx.registerForm.get(\"userId\")) == null ? null : tmp_1_0.invalid));\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_2_0.touched) && ((tmp_2_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_2_0.invalid));\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid || ctx.isLoading);\n            i0.ɵɵadvance(1);\n            i0.ɵɵtextInterpolate1(\" \", ctx.isLoading ? \"Registering...\" : \"Register\", \" \");\n          }\n        },\n        dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n        encapsulation: 2\n      });\n    }\n  }\n  return RegisterComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
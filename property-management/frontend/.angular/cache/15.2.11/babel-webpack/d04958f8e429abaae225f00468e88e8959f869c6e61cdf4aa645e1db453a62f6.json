{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport jwtDecode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = 'http://localhost:3000/auth';\n      this.tokenKey = 'auth_token';\n    }\n    login(userId, password) {\n      return this.http.post(`${this.baseUrl}/login`, {\n        username: userId,\n        password\n      }).pipe(tap(response => {\n        if (response.token) {\n          this.setToken(response.token);\n        }\n      }));\n    }\n    register(userId, password) {\n      return this.http.post(`${this.baseUrl}/register`, {\n        username: userId,\n        password\n      });\n    }\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    }\n    setToken(token) {\n      localStorage.setItem(this.tokenKey, token);\n    }\n    removeToken() {\n      localStorage.removeItem(this.tokenKey);\n    }\n    clearSession() {\n      this.removeToken();\n    }\n    isAuthenticated() {\n      return !!this.getToken();\n    }\n    isTokenExpired() {\n      const token = localStorage.getItem('auth_token');\n      if (!token) return true;\n      try {\n        const decoded = jwtDecode(token);\n        const currentTime = Math.floor(Date.now() / 1000);\n        return decoded.exp < currentTime;\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        return true;\n      }\n    }\n    autoLogoutOnTokenExpiry() {\n      if (this.isTokenExpired()) {\n        this.logout();\n        alert('Your session has expired. Please log in again.');\n      }\n    }\n    logout() {\n      localStorage.removeItem('auth_token');\n      // Redirect to login page or perform other logout actions\n    }\n\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}